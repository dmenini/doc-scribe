[tool.poetry]
name = "code-analyzer"
version = "0.1.0"
description = ""
authors = ["taamedag <Davide.Menini@swisscom.com>"]
readme = "README.md"

[[tool.poetry.source]]
name = "artifactory"
priority = "primary"
url = "https://artifactory.swisscom.com/artifactory/api/pypi/plato-pypi-virtual/simple/"

[tool.poetry.dependencies]
python = "^3.13"
anthropic = "0.40.0"
boto3 = "1.35.74"
pydantic = "2.10.6"
pydantic-ai = "0.0.22"
pydantic-settings = "2.7.1"
astpretty = "3.0.0"

[tool.poetry.group.dev.dependencies]
coverage = "7.6.10"
moto = "5.0.28"
mypy = "1.14.1"
pytest = "8.3.4"
pytest-asyncio = "0.25.3"
pytest-cov = "6.0.0"
pytest-httpx = "0.35.0"
pytest-mock = "3.14.0"
ruff = "0.9.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint]
select = ["ALL"]
# See https://docs.astral.sh/ruff/rules/
ignore = [
    "FIX", # Allow FIXME
    "TD", # Allow TODO
    "D", # Ignore docstring checks
    "ANN401", # Allow dynamically typed expressions (typing.Any)
    "COM812", # Do not require trailing comma (must be disabled to avoid conflicts with formatter)
    "ISC001", # Allows concatenated string literals on one line (must be disabled to avoid conflicts with formatter)
    "B008", # Do not perform function call in argument defaults -> Ignore because of fastapi.Depends usage
    "FA102", # `from __future__ import` annotations are not neeeded with python3.12
    "RET504", # Allow assignements of variable to return
    "EM101", # Allow exception to use a string literal
    "TRY003", # Allow specifying messages outside the exception class
    "ARG002", # Allow unused method argument (e.g. when inheriting from base classes)
    "TRY301", # Allow abstract `raise` to an inner function
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Asserts are allowed in tests
    "ARG", # Unused function args -> Fixtures are functionally relevant
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "S105", # Ignore possible hardcoded password for fake values
    "SLF001", # Ignore private member accessed
]
"integration_tests/**/*.py" = [
    "S101", # Asserts are allowed in tests
    "ARG", # Unused function args -> Fixtures are functionally relevant
]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
ignore_missing_imports = "True"
check_untyped_defs = "True"
disable_error_code = []
disallow_untyped_defs = "True"

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["method-assign", "attr-defined"]

[tool.coverage.run]
omit = ["tests/*", "integration_tests/*"]